{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BigbagService = /*#__PURE__*/(() => {\n  class BigbagService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost/php_backend_saint/'; // Ajusta según tu configuración\n    }\n    // Método principal para enviar datos del formulario BigBag\n    enviarDatosBigBag(formData, firmaFile, firmaConductorFile) {\n      const formDataToSend = new FormData();\n      // Agregar datos del formulario\n      Object.keys(formData).forEach(key => {\n        if (formData[key] !== null && formData[key] !== '') {\n          formDataToSend.append(key, formData[key]);\n        }\n      });\n      // Agregar archivos si existen\n      if (firmaFile) {\n        formDataToSend.append('firma', firmaFile, firmaFile.name);\n      }\n      if (firmaConductorFile) {\n        formDataToSend.append('firmaConductor', firmaConductorFile, firmaConductorFile.name);\n      }\n      // Agregar timestamp para el servidor\n      formDataToSend.append('timestamp', new Date().toISOString());\n      return this.http.post(`${this.apiUrl}/recepcion-bigbag.php`, formDataToSend);\n    }\n    // Método alternativo para enviar datos sin archivos (solo JSON)\n    enviarDatosJSON(bigbagData) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      });\n      return this.http.post(`${this.apiUrl}/recepcion-bigbag-json.php`, bigbagData, {\n        headers\n      });\n    }\n    // Obtener lista de recepciones\n    obtenerRecepciones() {\n      return this.http.get(`${this.apiUrl}/listar-recepciones.php`);\n    }\n    // Obtener recepción por ID\n    obtenerRecepcionPorId(id) {\n      return this.http.get(`${this.apiUrl}/obtener-recepcion.php?id=${id}`);\n    }\n    // Obtener recepciones por rango de fechas\n    obtenerRecepcionesPorFecha(fechaInicio, fechaFin) {\n      return this.http.get(`${this.apiUrl}/recepciones-por-fecha.php?fecha_inicio=${fechaInicio}&fecha_fin=${fechaFin}`);\n    }\n    // Obtener recepciones por planta\n    obtenerRecepcionesPorPlanta(planta) {\n      return this.http.get(`${this.apiUrl}/recepciones-por-planta.php?planta=${encodeURIComponent(planta)}`);\n    }\n    // Actualizar recepción\n    actualizarRecepcion(id, datos) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      });\n      return this.http.put(`${this.apiUrl}/actualizar-recepcion.php?id=${id}`, datos, {\n        headers\n      });\n    }\n    // Eliminar recepción\n    eliminarRecepcion(id) {\n      return this.http.delete(`${this.apiUrl}/eliminar-recepcion.php?id=${id}`);\n    }\n    // Método para generar reporte PDF\n    generarReportePDF(id) {\n      return this.http.get(`${this.apiUrl}/generar-reporte-pdf.php?id=${id}`, {\n        responseType: 'blob'\n      });\n    }\n    // Método para descargar reporte Excel\n    descargarReporteExcel(fechaInicio, fechaFin) {\n      return this.http.get(`${this.apiUrl}/reporte-excel.php?fecha_inicio=${fechaInicio}&fecha_fin=${fechaFin}`, {\n        responseType: 'blob'\n      });\n    }\n    // Validar número de remisión\n    validarRemision(numeroRemision) {\n      return this.http.get(`${this.apiUrl}/validar-remision.php?remision=${numeroRemision}`);\n    }\n    // Método para cargar imagen y obtener preview\n    cargarImagenPreview(file) {\n      return new Observable(observer => {\n        const reader = new FileReader();\n        reader.onload = e => {\n          observer.next(e.target?.result);\n          observer.complete();\n        };\n        reader.onerror = error => observer.error(error);\n        reader.readAsDataURL(file);\n      });\n    }\n    static #_ = (() => this.ɵfac = function BigbagService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BigbagService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BigbagService,\n      factory: BigbagService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return BigbagService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}