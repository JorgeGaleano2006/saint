{"ast":null,"code":"import { __decorate } from \"tslib\";\n// technical-report-bigbag.component.ts (versión actualizada con servicio)\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet TechnicalReportBigbagComponent = class TechnicalReportBigbagComponent {\n  constructor(fb, bigbagService) {\n    this.fb = fb;\n    this.bigbagService = bigbagService;\n    // Control de pasos\n    this.currentStep = 1;\n    this.totalSteps = 3;\n    // Estados de los pasos\n    this.stepStates = {\n      1: {\n        active: true,\n        completed: false\n      },\n      2: {\n        active: false,\n        completed: false\n      },\n      3: {\n        active: false,\n        completed: false\n      }\n    };\n    // Estados para manejar la carga\n    this.isSubmitting = false;\n    this.submitError = '';\n    this.submitSuccess = false;\n    // Para manejar archivos\n    this.selectedFirmaFile = null;\n    this.selectedFirmaConductorFile = null;\n    this.initializeForm();\n  }\n  ngOnInit() {\n    this.updateStepDisplay();\n  }\n  initializeForm() {\n    this.bigbagForm = this.fb.group({\n      // Paso 1: Información Inicial\n      fechaIngreso: [this.getTodayDate(), Validators.required],\n      horaIngreso: [this.getCurrentTime(), Validators.required],\n      planta: ['', Validators.required],\n      remision: ['', Validators.required],\n      cantidadRelacionada: ['', [Validators.required, Validators.min(1)]],\n      nomOperario: ['', Validators.required],\n      firma: [''],\n      // Campo opcional para imagen\n      observaciones: ['', Validators.required],\n      // Paso 2: Información Adicional\n      nomConductor: ['', Validators.required],\n      placaVehiculo: ['', Validators.required],\n      empresaTransporte: ['', Validators.required],\n      firmaConductor: ['', Validators.required],\n      // Paso 3: Datos Físicos\n      cantidadFisico: ['', [Validators.required, Validators.min(0)]],\n      diferenciaReportada: [''] // Campo calculado automáticamente\n    });\n    // Suscribirse a cambios en las cantidades para calcular la diferencia automáticamente\n    this.bigbagForm.get('cantidadRelacionada')?.valueChanges.subscribe(() => {\n      this.calcularDiferenciaReportada();\n    });\n    this.bigbagForm.get('cantidadFisico')?.valueChanges.subscribe(() => {\n      this.calcularDiferenciaReportada();\n    });\n  }\n  // Navegación entre pasos\n  siguientePaso() {\n    if (this.isCurrentStepValid() && this.currentStep < this.totalSteps) {\n      this.stepStates[this.currentStep].completed = true;\n      this.stepStates[this.currentStep].active = false;\n      this.currentStep++;\n      this.stepStates[this.currentStep].active = true;\n      this.updateStepDisplay();\n    } else {\n      this.markCurrentStepFieldsAsTouched();\n    }\n  }\n  pasoAnterior() {\n    if (this.currentStep > 1) {\n      this.stepStates[this.currentStep].active = false;\n      this.currentStep--;\n      this.stepStates[this.currentStep].active = true;\n      this.stepStates[this.currentStep].completed = false;\n      this.updateStepDisplay();\n    }\n  }\n  irAPaso(step) {\n    if (step <= this.currentStep || this.stepStates[step - 1]?.completed) {\n      this.stepStates[this.currentStep].active = false;\n      this.currentStep = step;\n      this.stepStates[this.currentStep].active = true;\n      this.updateStepDisplay();\n    }\n  }\n  // Función para calcular la diferencia reportada\n  calcularDiferenciaReportada() {\n    const cantidadRelacionada = this.bigbagForm.get('cantidadRelacionada')?.value;\n    const cantidadFisico = this.bigbagForm.get('cantidadFisico')?.value;\n    if (cantidadRelacionada && cantidadFisico) {\n      const cantRelacionada = parseFloat(cantidadRelacionada);\n      const cantFisico = parseFloat(cantidadFisico);\n      if (!isNaN(cantRelacionada) && !isNaN(cantFisico)) {\n        const diferencia = cantFisico - cantRelacionada;\n        let mensajeDiferencia = '';\n        if (diferencia > 0) {\n          mensajeDiferencia = `+${diferencia} productos de más`;\n        } else if (diferencia < 0) {\n          mensajeDiferencia = `${Math.abs(diferencia)} productos faltantes`;\n        } else {\n          mensajeDiferencia = 'Las cantidades coinciden';\n        }\n        this.bigbagForm.patchValue({\n          diferenciaReportada: mensajeDiferencia\n        });\n      }\n    }\n  }\n  // Manejo de archivos de firma\n  onSignatureChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      if (this.validateImageFile(file)) {\n        this.selectedFirmaFile = file;\n        this.bigbagForm.patchValue({\n          firma: file.name\n        });\n      } else {\n        event.target.value = '';\n      }\n    }\n  }\n  // Manejo de firma del conductor\n  onConductorSignatureChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      if (this.validateImageFile(file)) {\n        this.selectedFirmaConductorFile = file;\n        this.bigbagForm.patchValue({\n          firmaConductor: file.name\n        });\n      } else {\n        event.target.value = '';\n      }\n    }\n  }\n  // Validar archivo de imagen\n  validateImageFile(file) {\n    if (!file.type.startsWith('image/')) {\n      alert('Por favor seleccione un archivo de imagen válido.');\n      return false;\n    }\n    if (file.size > 5 * 1024 * 1024) {\n      // 5MB máximo\n      alert('El archivo es demasiado grande. El tamaño máximo es 5MB.');\n      return false;\n    }\n    return true;\n  }\n  // Envío del formulario\n  onSubmit() {\n    if (this.bigbagForm.valid) {\n      this.isSubmitting = true;\n      this.submitError = '';\n      this.submitSuccess = false;\n      // Preparar datos para envío\n      const formData = this.bigbagForm.value;\n      // Enviar datos usando el servicio\n      this.bigbagService.enviarDatosBigBag(formData, this.selectedFirmaFile || undefined, this.selectedFirmaConductorFile || undefined).subscribe({\n        next: response => {\n          this.isSubmitting = false;\n          if (response.success) {\n            this.submitSuccess = true;\n            this.submitError = '';\n            // Mostrar mensaje de éxito\n            alert(`Recepción guardada exitosamente. Número de recepción: ${response.datos?.numero_recepcion}`);\n            // Opcional: resetear formulario\n            this.resetForm();\n          } else {\n            this.submitError = response.mensaje || 'Error al guardar la recepción';\n            this.submitSuccess = false;\n          }\n        },\n        error: error => {\n          this.isSubmitting = false;\n          this.submitSuccess = false;\n          if (error.error && error.error.mensaje) {\n            this.submitError = error.error.mensaje;\n          } else {\n            this.submitError = 'Error de conexión. Por favor intente nuevamente.';\n          }\n          console.error('Error al enviar datos:', error);\n        }\n      });\n    } else {\n      // Marcar todos los campos como tocados para mostrar errores\n      this.markAllFieldsAsTouched();\n      this.submitError = 'Por favor complete todos los campos requeridos.';\n    }\n  }\n  // Método para resetear el formulario\n  resetForm() {\n    this.bigbagForm.reset();\n    this.currentStep = 1;\n    this.stepStates = {\n      1: {\n        active: true,\n        completed: false\n      },\n      2: {\n        active: false,\n        completed: false\n      },\n      3: {\n        active: false,\n        completed: false\n      }\n    };\n    this.selectedFirmaFile = null;\n    this.selectedFirmaConductorFile = null;\n    this.submitError = '';\n    this.submitSuccess = false;\n    this.isSubmitting = false;\n    // Restablecer valores por defecto\n    this.bigbagForm.patchValue({\n      fechaIngreso: this.getTodayDate(),\n      horaIngreso: this.getCurrentTime()\n    });\n    this.updateStepDisplay();\n  }\n  // Marcar todos los campos como tocados\n  markAllFieldsAsTouched() {\n    Object.keys(this.bigbagForm.controls).forEach(key => {\n      const control = this.bigbagForm.get(key);\n      if (control) {\n        control.markAsTouched();\n      }\n    });\n  }\n  // Validaciones\n  isCurrentStepValid() {\n    const currentStepFields = this.getFieldsForStep(this.currentStep);\n    for (const field of currentStepFields) {\n      const control = this.bigbagForm.get(field);\n      if (control && control.invalid) {\n        return false;\n      }\n    }\n    return true;\n  }\n  markCurrentStepFieldsAsTouched() {\n    const currentStepFields = this.getFieldsForStep(this.currentStep);\n    currentStepFields.forEach(field => {\n      const control = this.bigbagForm.get(field);\n      if (control) {\n        control.markAsTouched();\n      }\n    });\n  }\n  getFieldsForStep(step) {\n    switch (step) {\n      case 1:\n        return ['fechaIngreso', 'horaIngreso', 'planta', 'remision', 'cantidadRelacionada', 'nomOperario', 'observaciones'];\n      case 2:\n        return ['nomConductor', 'placaVehiculo', 'empresaTransporte', 'firmaConductor'];\n      case 3:\n        return ['cantidadFisico'];\n      default:\n        return [];\n    }\n  }\n  // Utilidades\n  getTodayDate() {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n  getCurrentTime() {\n    const now = new Date();\n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n  updateStepDisplay() {\n    this.updateStepStyles();\n    this.updateStepContent();\n  }\n  updateStepStyles() {\n    for (let i = 1; i <= this.totalSteps; i++) {\n      const stepElement = document.getElementById(`cont_paso${i}`);\n      const stepCircle = stepElement?.querySelector('.paso');\n      if (stepElement && stepCircle) {\n        stepElement.classList.remove('active', 'completed');\n        stepCircle.classList.remove('active', 'completed');\n        if (this.stepStates[i].active) {\n          stepElement.classList.add('active');\n          stepCircle.classList.add('active');\n        } else if (this.stepStates[i].completed) {\n          stepElement.classList.add('completed');\n          stepCircle.classList.add('completed');\n        }\n      }\n    }\n  }\n  updateStepContent() {\n    const allStepContents = document.querySelectorAll('.step-content');\n    allStepContents.forEach(content => {\n      content.style.display = 'none';\n    });\n    const currentStepContent = document.getElementById(`step-content-${this.currentStep}`);\n    if (currentStepContent) {\n      currentStepContent.style.display = 'block';\n    }\n  }\n  isFieldInvalid(fieldName) {\n    const field = this.bigbagForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n  getFieldError(fieldName) {\n    const field = this.bigbagForm.get(fieldName);\n    if (field && field.errors) {\n      if (field.errors['required']) {\n        return 'Este campo es requerido';\n      }\n      if (field.errors['min']) {\n        return `El valor mínimo es ${field.errors['min'].min}`;\n      }\n    }\n    return '';\n  }\n};\nTechnicalReportBigbagComponent = __decorate([Component({\n  selector: 'app-technical-report-bigbag',\n  templateUrl: './technical-report-bigbag.component.html',\n  styleUrls: ['./technical-report-bigbag.component.css']\n})], TechnicalReportBigbagComponent);\nexport { TechnicalReportBigbagComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}