{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet TechnicalReportBigbagComponent = class TechnicalReportBigbagComponent {\n  constructor(fb, bigBagService) {\n    this.fb = fb;\n    this.bigBagService = bigBagService;\n    // Control de pasos\n    this.currentStep = 1;\n    this.totalSteps = 3;\n    // Estados de los pasos\n    this.stepStates = {\n      1: {\n        active: true,\n        completed: false\n      },\n      2: {\n        active: false,\n        completed: false\n      },\n      3: {\n        active: false,\n        completed: false\n      }\n    };\n    // Estados de carga\n    this.isLoading = false;\n    this.isSubmitting = false;\n    // Datos dinámicos\n    this.plantas = [];\n    this.tiposMaterial = [];\n    this.initializeForm();\n  }\n  ngOnInit() {\n    this.updateStepDisplay();\n    this.loadInitialData();\n    this.loadDraft();\n    // Auto-guardar borrador cada 30 segundos\n    setInterval(() => {\n      this.saveDraft();\n    }, 30000);\n  }\n  ngOnDestroy() {\n    // Guardar borrador antes de salir\n    this.saveDraft();\n  }\n  loadInitialData() {\n    this.isLoading = true;\n    // Cargar plantas\n    this.bigBagService.getPlantas().subscribe({\n      next: plantas => {\n        this.plantas = plantas;\n      },\n      error: error => {\n        console.error('Error al cargar plantas:', error);\n      }\n    });\n    // Cargar tipos de material\n    this.bigBagService.getTiposMaterial().subscribe({\n      next: tipos => {\n        this.tiposMaterial = tipos;\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Error al cargar tipos de material:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n  loadDraft() {\n    const borrador = this.bigBagService.recuperarBorrador();\n    if (borrador) {\n      const confirmLoad = confirm('Se encontró un borrador guardado. ¿Desea cargarlo?');\n      if (confirmLoad) {\n        this.bigbagForm.patchValue(borrador);\n      }\n    }\n  }\n  saveDraft() {\n    if (this.bigbagForm.dirty) {\n      this.bigBagService.guardarBorrador(this.bigbagForm.value);\n    }\n  }\n  initializeForm() {\n    this.bigbagForm = this.fb.group({\n      // Paso 1: Información Inicial\n      fechaIngreso: [this.getTodayDate(), Validators.required],\n      horaIngreso: [this.getCurrentTime(), Validators.required],\n      planta: ['', Validators.required],\n      remision: ['', Validators.required],\n      cantidadRelacionada: ['', [Validators.required, Validators.min(1)]],\n      nomOperario: ['', Validators.required],\n      firma: ['', Validators.required],\n      observaciones: ['', Validators.required],\n      // Paso 2: Información Adicional\n      nomConductor: ['', Validators.required],\n      placaVehiculo: ['', Validators.required],\n      empresaTransporte: ['', Validators.required],\n      documentoConductor: ['', Validators.required],\n      // Paso 3: Datos Físicos\n      pesoTotal: ['', [Validators.required, Validators.min(0)]],\n      estadoEmpaque: ['', Validators.required],\n      tipoMaterial: ['', Validators.required],\n      observacionesFisicas: ['']\n    });\n  }\n  // Navegación entre pasos\n  siguientePaso() {\n    if (this.isCurrentStepValid() && this.currentStep < this.totalSteps) {\n      this.stepStates[this.currentStep].completed = true;\n      this.stepStates[this.currentStep].active = false;\n      this.currentStep++;\n      this.stepStates[this.currentStep].active = true;\n      this.updateStepDisplay();\n    } else {\n      this.markCurrentStepFieldsAsTouched();\n    }\n  }\n  pasoAnterior() {\n    if (this.currentStep > 1) {\n      this.stepStates[this.currentStep].active = false;\n      this.currentStep--;\n      this.stepStates[this.currentStep].active = true;\n      this.stepStates[this.currentStep].completed = false;\n      this.updateStepDisplay();\n    }\n  }\n  irAPaso(step) {\n    if (step <= this.currentStep || this.stepStates[step - 1]?.completed) {\n      this.stepStates[this.currentStep].active = false;\n      this.currentStep = step;\n      this.stepStates[this.currentStep].active = true;\n      this.updateStepDisplay();\n    }\n  }\n  // Validaciones\n  isCurrentStepValid() {\n    const currentStepFields = this.getFieldsForStep(this.currentStep);\n    for (const field of currentStepFields) {\n      const control = this.bigbagForm.get(field);\n      if (control && control.invalid) {\n        return false;\n      }\n    }\n    return true;\n  }\n  markCurrentStepFieldsAsTouched() {\n    const currentStepFields = this.getFieldsForStep(this.currentStep);\n    currentStepFields.forEach(field => {\n      const control = this.bigbagForm.get(field);\n      if (control) {\n        control.markAsTouched();\n      }\n    });\n  }\n  getFieldsForStep(step) {\n    switch (step) {\n      case 1:\n        return ['fechaIngreso', 'horaIngreso', 'planta', 'remision', 'cantidadRelacionada', 'nomOperario', 'firma', 'observaciones'];\n      case 2:\n        return ['nomConductor', 'placaVehiculo', 'empresaTransporte', 'documentoConductor'];\n      case 3:\n        return ['pesoTotal', 'estadoEmpaque', 'tipoMaterial'];\n      default:\n        return [];\n    }\n  }\n  // Utilidades\n  getTodayDate() {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n  getCurrentTime() {\n    const now = new Date();\n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    return `${hours}:${minutes}`;\n  }\n  updateStepDisplay() {\n    // Actualiza las clases CSS de los pasos\n    this.updateStepStyles();\n    // Muestra/oculta los contenidos de cada paso\n    this.updateStepContent();\n  }\n  updateStepStyles() {\n    for (let i = 1; i <= this.totalSteps; i++) {\n      const stepElement = document.getElementById(`cont_paso${i}`);\n      const stepCircle = stepElement?.querySelector('.paso');\n      if (stepElement && stepCircle) {\n        // Remover clases existentes\n        stepElement.classList.remove('active', 'completed');\n        stepCircle.classList.remove('active', 'completed');\n        // Añadir clase según el estado\n        if (this.stepStates[i].active) {\n          stepElement.classList.add('active');\n          stepCircle.classList.add('active');\n        } else if (this.stepStates[i].completed) {\n          stepElement.classList.add('completed');\n          stepCircle.classList.add('completed');\n        }\n      }\n    }\n  }\n  updateStepContent() {\n    // Oculta todos los contenidos de pasos\n    const allStepContents = document.querySelectorAll('.step-content');\n    allStepContents.forEach(content => {\n      content.style.display = 'none';\n    });\n    // Muestra solo el contenido del paso actual\n    const currentStepContent = document.getElementById(`step-content-${this.currentStep}`);\n    if (currentStepContent) {\n      currentStepContent.style.display = 'block';\n    }\n  }\n  // Validación de campos individuales\n  isFieldInvalid(fieldName) {\n    const field = this.bigbagForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n  getFieldError(fieldName) {\n    const field = this.bigbagForm.get(fieldName);\n    if (field && field.errors) {\n      if (field.errors['required']) {\n        return 'Este campo es requerido';\n      }\n      if (field.errors['min']) {\n        return `El valor mínimo es ${field.errors['min'].min}`;\n      }\n    }\n    return '';\n  }\n  // Manejo de firma\n  onSignatureClick() {\n    // Simulación simple para pruebas\n    const signature = prompt('Ingrese su firma (nombre completo):');\n    if (signature && signature.trim()) {\n      this.bigbagForm.patchValue({\n        firma: signature.trim()\n      });\n      // Actualizar la visualización\n      const signatureArea = document.querySelector('.signature-text');\n      if (signatureArea) {\n        signatureArea.textContent = `Firmado por: ${signature.trim()}`;\n      }\n    }\n  }\n  // Envío del formulario\n  onSubmit() {\n    if (this.bigbagForm.valid) {\n      this.isSubmitting = true;\n      const formData = this.bigbagForm.value;\n      this.bigBagService.submitForm(formData).subscribe({\n        next: response => {\n          console.log('Formulario enviado exitosamente:', response);\n          alert('Formulario enviado exitosamente');\n          // Limpiar formulario y borrador\n          this.bigbagForm.reset();\n          this.bigBagService.limpiarBorrador();\n          // Volver al paso 1\n          this.currentStep = 1;\n          this.stepStates = {\n            1: {\n              active: true,\n              completed: false\n            },\n            2: {\n              active: false,\n              completed: false\n            },\n            3: {\n              active: false,\n              completed: false\n            }\n          };\n          this.updateStepDisplay();\n          this.isSubmitting = false;\n        },\n        error: error => {\n          console.error('Error al enviar formulario:', error);\n          alert('Error al enviar el formulario. Por favor, inténtelo nuevamente.');\n          this.isSubmitting = false;\n        }\n      });\n    } else {\n      console.log('Formulario inválido');\n      this.markAllFieldsAsTouched();\n    }\n  }\n  // Validación de remisión\n  onRemisionChange() {\n    const remision = this.bigbagForm.get('remision')?.value;\n    if (remision && remision.length > 3) {\n      this.bigBagService.validarRemision(remision).subscribe({\n        next: response => {\n          if (!response.valid) {\n            this.bigbagForm.get('remision')?.setErrors({\n              invalid: true\n            });\n          }\n        },\n        error: error => {\n          console.error('Error al validar remisión:', error);\n        }\n      });\n    }\n  }\n  markAllFieldsAsTouched() {\n    Object.keys(this.bigbagForm.controls).forEach(key => {\n      const control = this.bigbagForm.get(key);\n      if (control) {\n        control.markAsTouched();\n      }\n    });\n  }\n  // Getters para facilitar el acceso en el template\n  get fechaIngreso() {\n    return this.bigbagForm.get('fechaIngreso');\n  }\n  get horaIngreso() {\n    return this.bigbagForm.get('horaIngreso');\n  }\n  get planta() {\n    return this.bigbagForm.get('planta');\n  }\n  get remision() {\n    return this.bigbagForm.get('remision');\n  }\n  get cantidadRelacionada() {\n    return this.bigbagForm.get('cantidadRelacionada');\n  }\n  get nomOperario() {\n    return this.bigbagForm.get('nomOperario');\n  }\n  get firma() {\n    return this.bigbagForm.get('firma');\n  }\n  get observaciones() {\n    return this.bigbagForm.get('observaciones');\n  }\n  get nomConductor() {\n    return this.bigbagForm.get('nomConductor');\n  }\n  get placaVehiculo() {\n    return this.bigbagForm.get('placaVehiculo');\n  }\n  get empresaTransporte() {\n    return this.bigbagForm.get('empresaTransporte');\n  }\n  get documentoConductor() {\n    return this.bigbagForm.get('documentoConductor');\n  }\n  get pesoTotal() {\n    return this.bigbagForm.get('pesoTotal');\n  }\n  get estadoEmpaque() {\n    return this.bigbagForm.get('estadoEmpaque');\n  }\n  get tipoMaterial() {\n    return this.bigbagForm.get('tipoMaterial');\n  }\n  get observacionesFisicas() {\n    return this.bigbagForm.get('observacionesFisicas');\n  }\n};\nTechnicalReportBigbagComponent = __decorate([Component({\n  selector: 'app-technical-report-bigbag',\n  templateUrl: './technical-report-bigbag.component.html',\n  styleUrls: ['./technical-report-bigbag.component.css']\n})], TechnicalReportBigbagComponent);\nexport { TechnicalReportBigbagComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}